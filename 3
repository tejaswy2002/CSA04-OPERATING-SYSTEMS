#include <stdio.h>

struct Process {
    int pid;            // Process ID
    int burst_time;     // Burst Time (CPU time required)
    int waiting_time;   // Waiting Time
    int turnaround_time;// Turnaround Time
};

void calculateWaitingTime(struct Process proc[], int n) {
    proc[0].waiting_time = 0; // First process has no waiting time

    for (int i = 1; i < n; i++) {
        proc[i].waiting_time = proc[i-1].waiting_time + proc[i-1].burst_time;
    }
}

void calculateTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++) {
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
    }
}

void displayProcessInfo(struct Process proc[], int n) {
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].waiting_time, proc[i].turnaround_time);
    }
}

void calculateAverageTimes(struct Process proc[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    for (int i = 0; i < n; i++) {
        proc[i].pid = i + 1;
        printf("Enter burst time for Process %d: ", proc[i].pid);
        scanf("%d", &proc[i].burst_time);
    }

    // Calculate waiting time for all processes
    calculateWaitingTime(proc, n);

    // Calculate turnaround time for all processes
    calculateTurnaroundTime(proc, n);

    // Display process information
    displayProcessInfo(proc, n);

    // Calculate and display average waiting and turnaround times
    calculateAverageTimes(proc, n);

    return 0;
}
