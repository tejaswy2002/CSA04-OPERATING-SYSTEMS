#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

// Structure to represent a process
struct Process {
    int id;       // Process ID
    int priority; // Priority of the process
    int burstTime; // Burst time of the process
};

// Function to sort processes based on priority (higher priority first)
void sortProcessesByPriority(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority < processes[j + 1].priority) {
                // Swap processes[j] and processes[j + 1]
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

// Function to simulate process execution
void executeProcesses(struct Process processes[], int n) {
    printf("Executing processes based on priority:\n");
    for (int i = 0; i < n; i++) {
        printf("Process ID: %d, Priority: %d, Burst Time: %d\n", 
               processes[i].id, processes[i].priority, processes[i].burstTime);
        // Simulate process execution (e.g., just print the process details)
    }
}

int main() {
    int n;
    struct Process processes[MAX_PROCESSES];

    printf("Enter the number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);

    if (n > MAX_PROCESSES) {
        printf("Error: Number of processes exceeds the maximum limit.\n");
        return 1;
    }

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for Process %d\n", i + 1);
        processes[i].id = i + 1;
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
    }

    // Sort processes based on priority
    sortProcessesByPriority(processes, n);

    // Execute processes
    executeProcesses(processes, n);

    return 0;
}
